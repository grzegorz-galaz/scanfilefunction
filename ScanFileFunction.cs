// Importujemy przestrzeÅ„ nazw do pracy ze zdarzeniami Event Grid
using Azure.Messaging.EventGrid;

// Importujemy atrybuty funkcji Azure Functions (w wersji isolated process)
using Microsoft.Azure.Functions.Worker;

// Importujemy loggera, ktÃ³ry pozwala zapisywaÄ‡ logi (np. do Application Insights)
using Microsoft.Extensions.Logging;

namespace ScanFileFunction // PrzestrzeÅ„ nazw projektu (upewnij siÄ™, Å¼e jest spÃ³jna z resztÄ… projektu)
{
    // Klasa definiujÄ…ca funkcjÄ™ Azure Function â€” logikÄ™, ktÃ³ra bÄ™dzie wywoÅ‚ywana po zdarzeniu z Event Grid
    public class ScanFileFunction
    {
        // Pole do przechowywania loggera przekazanego przez DI (Dependency Injection)
        private readonly ILogger<ScanFileFunction> _logger;

        // Konstruktor klasy, do ktÃ³rego wstrzykiwany jest logger â€” umoÅ¼liwia logowanie zdarzeÅ„
        public ScanFileFunction(ILogger<ScanFileFunction> logger)
        {
            _logger = logger;
        }

        // GÅ‚Ã³wna funkcja, ktÃ³ra zostanie wywoÅ‚ana, gdy Event Grid dostarczy zdarzenie
        [Function(nameof(ScanFileFunction))] // Atrybut okreÅ›lajÄ…cy nazwÄ™ funkcji w Azure
        public void Run([EventGridTrigger] EventGridEvent eventGridEvent)
        {
            // Log na start dziaÅ‚ania funkcji â€” przydatny przy debugowaniu
            _logger.LogInformation("ðŸŸ¢ ScanFileFunction was triggered.");

            // Logujemy podstawowe informacje o odebranym zdarzeniu â€” typ oraz dane
            _logger.LogInformation($"ðŸ“¦ Received event type: {eventGridEvent.EventType}");
            _logger.LogInformation($"ðŸ“„ Event data: {eventGridEvent.Data.ToString()}");
        }
    }
}
