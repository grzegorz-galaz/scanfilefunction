// Importuje klasÄ™, ktÃ³ra umoÅ¼liwia utworzenie aplikacji funkcji w trybie Isolated Worker
using Microsoft.Azure.Functions.Worker;

// Importuje rozszerzenia do konfiguracji aplikacji funkcji
using Microsoft.Azure.Functions.Worker.Builder;

// UmoÅ¼liwia korzystanie z wstrzykiwania zaleÅ¼noÅ›ci i konfiguracji usÅ‚ug
using Microsoft.Extensions.DependencyInjection;

// UdostÄ™pnia klasÄ™ do tworzenia i uruchamiania hosta aplikacji
using Microsoft.Extensions.Hosting;

// UdostÄ™pnia interfejs do logowania
using Microsoft.Extensions.Logging;

// UdostÄ™pnia moÅ¼liwoÅ›Ä‡ odczytu konfiguracji (np. z appsettings.json)
using Microsoft.Extensions.Configuration;

// ğŸ”§ Tworzymy buildera aplikacji funkcji
var builder = FunctionsApplication.CreateBuilder(args);

// ğŸ”§ (Opcjonalnie, tylko lokalnie): pozwala na uÅ¼ycie pliku appsettings.json do konfiguracji
// builder.Configuration.AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);

// ğŸ”§ Konfigurujemy domyÅ›lne ustawienia funkcji (obsÅ‚uga HTTP, DI, itp.)
builder.ConfigureFunctionsWebApplication();

builder.Services
    // ğŸ”§ WÅ‚Ä…czamy Application Insights â€” telemetria, logi w Azure
    .AddApplicationInsightsTelemetryWorkerService()

    // ğŸ”§ Konfigurujemy ustawienia Application Insights dla funkcji
    .ConfigureFunctionsApplicationInsights();

// ğŸ”§ Log startowy â€” pomocny, aby upewniÄ‡ siÄ™, Å¼e host wystartowaÅ‚
var tempLogger = builder.Services.BuildServiceProvider().GetRequiredService<ILogger<Program>>();
tempLogger.LogInformation("ğŸš€ Azure Function host started (Program.cs log)");

// ğŸ”§ Budujemy i uruchamiamy hosta aplikacji funkcji
builder.Build().Run();
