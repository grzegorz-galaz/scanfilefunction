// Importujemy przestrzenie nazw niezbÄ™dne do dziaÅ‚ania funkcji Azure
using Microsoft.Azure.Functions.Worker; // GÅ‚Ã³wna przestrzeÅ„ do definiowania funkcji
using Microsoft.Azure.Functions.Worker.Builder; // Rozszerzenia do budowania aplikacji funkcji
using Microsoft.Extensions.DependencyInjection; // ObsÅ‚uga Dependency Injection
using Microsoft.Extensions.Hosting; // Tworzenie i uruchamianie hosta aplikacji
using Microsoft.Extensions.Logging; // System logowania
using Microsoft.Extensions.Configuration; // Odczyt konfiguracji (np. z appsettings.json)

// PrzestrzeÅ„ nazw zgodna z nazwÄ… projektu
namespace ScanFileFunction
{
    // GÅ‚Ã³wna klasa uruchamiajÄ…ca aplikacjÄ™ funkcji
    public class Program
    {
        // Punkt wejÅ›cia do aplikacji â€” odpowiednik `Main()` w klasycznej aplikacji .NET
        public static void Main(string[] args)
        {
            // ðŸ”§ Tworzymy buildera aplikacji funkcji (hosta) â€” odpowiada za konfiguracjÄ™ Å›rodowiska
            var builder = FunctionsApplication.CreateBuilder(args);

            // ðŸ”§ (Opcjonalnie: tylko lokalnie) â€” umoÅ¼liwia odczyt konfiguracji z appsettings.json
            // builder.Configuration.AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);

            // ðŸ”§ DomyÅ›lna konfiguracja aplikacji funkcji:
            // rejestruje obsÅ‚ugÄ™ funkcji, obsÅ‚ugÄ™ HTTP, DI i inne rozszerzenia
            builder.ConfigureFunctionsWebApplication();

            // ðŸ”§ Rejestrujemy Application Insights (logi, metryki w Azure)
            builder.Services
                .AddApplicationInsightsTelemetryWorkerService() // Rejestracja telemetryki
                .ConfigureFunctionsApplicationInsights(); // Konfiguracja AI (np. sampling, context)

            // ðŸ”§ Tworzymy tymczasowy logger, aby potwierdziÄ‡, Å¼e host funkcji wystartowaÅ‚
            var tempLogger = builder.Services.BuildServiceProvider().GetRequiredService<ILogger<Program>>();
            tempLogger.LogInformation("ðŸš€ Azure Function host started (Program.cs log)");

            // ðŸ”§ Budujemy i uruchamiamy hosta aplikacji funkcji â€” od tego momentu dziaÅ‚a nasza logika
            builder.Build().Run();
        }
    }
}
